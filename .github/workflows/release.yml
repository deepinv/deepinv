name: Auto Publish to PyPI

on:
  workflow_dispatch:        # manual trigger
    inputs:
      bump_type:
        description: 'Type of version bump'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - dev # for debugging

permissions:
  contents: write
  
jobs:
  build-test-publish:
    name: Auto version, test & publish
    runs-on: ubuntu-latest

    steps:
      - name: Check CI is passing
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPO="deepinv/deepinv"

          get_status () {
            curl -s -H "Authorization: token $GH_TOKEN" \
              "https://api.github.com/repos/$REPO/actions/workflows/$1/runs?branch=main&status=completed&per_page=1" \
              | jq -r '.workflow_runs[0].conclusion'
          }

          STATUS_TEST=$(get_status "test.yml")
          STATUS_DOC=$(get_status "documentation.yml")

          echo "Test: $STATUS_TEST"
          echo "Docs: $STATUS_DOC"

          if [[ "$STATUS_TEST" != "success" || "$STATUS_DOC" != "success" ]]; then
            echo "❌ One or both workflows failed — aborting."
            exit 1
          fi

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for recent release commit
        id: check_release
        run: |
          LAST_COMMIT_MSG=$(git log -1 --pretty=%s)
          echo "Last commit: $LAST_COMMIT_MSG"
          if [[ "$LAST_COMMIT_MSG" =~ ^Release\ v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            echo "Latest commit is a release. Skipping release process."
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Exit if no new changes
        if: steps.check_release.outputs.skip == 'true'
        run: |
          echo "No new changes since last release. Skipping workflow."
          exit 1
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install tools
        run: |
          pip install --upgrade build twine tomlkit

      - name: Build the package
        run: python -m build

      - name: Update changelog
        id: changelog
        run: |
          python .github/scripts/get_latest_changelog.py CHANGELOG.rst ${{github.event.inputs.bump_type}}

      - name: Bump version
        id: bump
        run: |
          python .github/scripts/bump_version.py pyproject.toml ${{github.event.inputs.bump_type}}
          echo "version=$(python .github/scripts/get_version.py pyproject.toml)" >> "$GITHUB_OUTPUT"

      - name: create PR with changes
        uses: peter-evans/create-pull-request@v7
        with:
          branch: release-branch
          title: "Release v${{ steps.bump.outputs.version }}"
          body: |
            This automatic PR updates the version to v${{ steps.bump.outputs.version }} and updates the changelog.
            Please merge this PR to finalize the release.
          commit-message: "Release v${{ steps.bump.outputs.version }}"
          base: main
          labels: release
          delete-branch: true
    
      - name: Create Github release
        if: ${{ github.event.inputs.bump_type != 'dev' }} and ${{ success() }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.bump.outputs.version }}
          body_path: changelog.txt
          name: Release v${{ steps.bump.outputs.version }}
          files: dist/*