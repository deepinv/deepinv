name: GPU Docs

on:
  schedule:
    - cron: "30 2 */1 * *"
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      pr_number:
        description: "PR number to test"
        required: true
        type: number

jobs:
  test:
    name: Check examples and docs run on GPU
    runs-on: gpu
    env:
      DEEPINV_MOCK_TESTS: "True"
      UV_CACHE_DIR: "/local/jtachell/.cache/uv"
      WORKING_DIR: "/local/jtachell"

    steps:
      - uses: actions/checkout@v5

      # See https://docs.astral.sh/uv/guides/integration/github
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          version: "0.8.22"
          python-version: "3.11"
          cache-local-path: ${{ env.UV_CACHE_DIR }}

      - name: Set up Python
        run: |
          uv python install
          uv run python --version

      - name: Install the project
        run: uv sync --extra dataset --extra denoisers --extra test --extra training --extra doc

      - name: Check installed packages
        run: |
          uv pip list

      - name: Check import
        run: |
          uv run python -c "import deepinv"

      - name: Sphinx build
        run: |
          uv run python -m sphinx docs/source _build

      - name: Run doctests
        run: |
          _doctest_files=$(find . -name '*.rst' ! -name '*multigpu.rst' ! -name '*datasets*.rst')
          uv run python -m sphinx -M doctest docs/source/ docs/build/ -D plot_gallery=0 -v $_doctest_files

      - name: Cleanup environment and workspace
        if: always()
        run: |
          cd ${{ env.WORKING_DIR }}
      
          # Enable matching hidden files
          shopt -s dotglob nullglob
      
          # Remove everything except GitHub metadata and caches
          for item in *; do
            case "$item" in
              .git|.github|.cache|_actions|_work)
                echo "Preserving $item"
                ;;
              *)
                echo "Removing $item"
                rm -rf "$item"
                ;;
            esac
          done
      
          echo "âœ… Workspace cleanup complete."