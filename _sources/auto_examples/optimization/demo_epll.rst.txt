
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/optimization/demo_epll.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        New to DeepInverse? Get started with the basics with the
        :ref:`5 minute quickstart tutorial <sphx_glr_auto_examples_basics_demo_quickstart.py>`.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_optimization_demo_epll.py:


Expected Patch Log Likelihood (EPLL) for Denoising and Inpainting
====================================================================================================

In this example we use the expected patch log likelihood (EPLL) prior :footcite:t:`zoran2011learning`.
for denoising and inpainting of natural images.
To this end, we consider the inverse problem :math:`y = Ax+\epsilon`, where :math:`A` is either the identity (for denoising)
or a masking operator (for inpainting) and :math:`\epsilon\sim\mathcal{N}(0,\sigma^2 I)` is white Gaussian noise with standard deviation :math:`\sigma`.

.. GENERATED FROM PYTHON SOURCE LINES 10-20

.. code-block:: Python


    import torch
    from deepinv.optim import EPLL
    from deepinv.physics import GaussianNoise, Denoising, Inpainting
    from deepinv.loss.metric import PSNR
    from deepinv.utils import plot
    from deepinv.utils import load_example

    device = "cuda" if torch.cuda.is_available() else "cpu"








.. GENERATED FROM PYTHON SOURCE LINES 21-26

Load test image and model
----------------------------------------
As default EPLL loads pretrained weights for the Gaussian mixture model which where estimted based
on 50 mio patches extracted from the BSDS500 dataset. An example how to estimate the parameters of GMM
is included in the demo for limited-angle CT with patch priors.

.. GENERATED FROM PYTHON SOURCE LINES 26-31

.. code-block:: Python


    test_img = load_example("CBSD_0010.png", grayscale=False).to(device)
    patch_size = 6
    model = EPLL(channels=test_img.shape[1], patch_size=patch_size, device=device)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading: "https://huggingface.co/deepinv/EPLL/resolve/main/GMM_BSDS_color2.pt?download=true" to /home/runner/.cache/torch/hub/checkpoints/GMM_BSDS_color2.pt
      0%|          | 0.00/35.7M [00:00<?, ?B/s]     49%|████▉     | 17.6M/35.7M [00:00<00:00, 185MB/s]    100%|██████████| 35.7M/35.7M [00:00<00:00, 243MB/s]




.. GENERATED FROM PYTHON SOURCE LINES 32-36

Denoising
----------
In this setting, the operator :math:`A` is the identity; we set the noise level to :math:`\sigma=25/255`.
Define noise model, operator and generate observation

.. GENERATED FROM PYTHON SOURCE LINES 36-42

.. code-block:: Python


    sigma = 0.1
    noise_model = GaussianNoise(sigma)
    physics = Denoising(noise_model=noise_model)
    observation = physics(test_img)








.. GENERATED FROM PYTHON SOURCE LINES 43-47

We use the default choice of the betas in the half quadratic splitting given by
:math:`\beta \in \sigma^{-2} \{1,4,8,16,32\}`.
Generally, the betas are hyperparameters, which have to be chosen for each inverse problem separately.


.. GENERATED FROM PYTHON SOURCE LINES 47-65

.. code-block:: Python


    # Reconstruction
    with torch.no_grad():
        x_out = model(observation, physics, batch_size=5000)

    # PSNR computation and plots.
    psnr_obs = PSNR()(observation, test_img).item()
    psnr_recon = PSNR()(x_out, test_img).item()

    print("PSNRs for Denoising:")
    print("Observation: {0:.2f}".format(psnr_obs))
    print("EPLL: {0:.2f}".format(psnr_recon))

    plot(
        [test_img, observation.clip(0, 1), x_out.clip(0, 1)],
        ["Ground truth", "Observation", "EPLL"],
    )




.. image-sg:: /auto_examples/optimization/images/sphx_glr_demo_epll_001.png
   :alt: Ground truth, Observation, EPLL
   :srcset: /auto_examples/optimization/images/sphx_glr_demo_epll_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    PSNRs for Denoising:
    Observation: 20.00
    EPLL: 28.96




.. GENERATED FROM PYTHON SOURCE LINES 66-70

Inpainting
----------
We now turn to a noisy inpainting problem, where the operator :math:`A` is a masking operator.
Define noise model, operator and generate observation

.. GENERATED FROM PYTHON SOURCE LINES 70-80

.. code-block:: Python


    sigma = 0.01
    physics = Inpainting(
        img_size=test_img[0].shape,
        mask=0.7,
        device=device,
        noise_model=GaussianNoise(sigma),
    )
    observation = physics(test_img)








.. GENERATED FROM PYTHON SOURCE LINES 81-83

Here, we need a different choice of beta. To this end, we extended the default choice
by two values and optimized a constant factor via grid search.

.. GENERATED FROM PYTHON SOURCE LINES 83-103

.. code-block:: Python


    betas = [1.0, 5.0, 10.0, 40.0, 80.0, 160.0, 320.0]

    # Reconstruction
    with torch.no_grad():
        x_out = model(observation, physics, betas=betas, batch_size=5000)

    # PSNR computation and plots
    psnr_obs = PSNR()(observation, test_img).item()
    psnr_recon = PSNR()(x_out, test_img).item()

    print("PSNRs for Inpainting:")
    print("Observation: {0:.2f}".format(psnr_obs))
    print("EPLL: {0:.2f}".format(psnr_recon))

    plot(
        [test_img, observation.clip(0, 1), x_out.clip(0, 1)],
        ["Ground truth", "Observation", "EPLL"],
    )




.. image-sg:: /auto_examples/optimization/images/sphx_glr_demo_epll_002.png
   :alt: Ground truth, Observation, EPLL
   :srcset: /auto_examples/optimization/images/sphx_glr_demo_epll_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    PSNRs for Inpainting:
    Observation: 10.94
    EPLL: 28.93




.. GENERATED FROM PYTHON SOURCE LINES 104-107

:References:

.. footbibliography::


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 47.110 seconds)


.. _sphx_glr_download_auto_examples_optimization_demo_epll.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: demo_epll.ipynb <demo_epll.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: demo_epll.py <demo_epll.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: demo_epll.zip <demo_epll.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
