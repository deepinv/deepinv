
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/optimization/demo_wavelet_prior.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        New to DeepInverse? Get started with the basics with the
        :ref:`5 minute quickstart tutorial <sphx_glr_auto_examples_basics_demo_quickstart.py>`.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_optimization_demo_wavelet_prior.py:


Image inpainting with wavelet prior
====================================================================================================

This example shows how to use a standard wavelet prior for image inpainting. The problem writes as :math:`y = Ax + \epsilon`
where :math:`A` is a mask and :math:`\epsilon` is the realization of some Gaussian noise. The goal is
to recover the original image :math:`x` from the blurred and noisy image :math:`y`. The wavelet prior is used to regularize
the problem.

.. GENERATED FROM PYTHON SOURCE LINES 12-22

.. code-block:: Python

    import deepinv as dinv
    from pathlib import Path
    import torch
    from torchvision import transforms

    from deepinv.optim.data_fidelity import L2
    from deepinv.optim.optimizers import optim_builder
    from deepinv.utils import load_dataset
    from deepinv.utils.plotting import plot, plot_curves








.. GENERATED FROM PYTHON SOURCE LINES 23-26

Setup paths for data loading and results.
----------------------------------------------------------------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 26-33

.. code-block:: Python


    BASE_DIR = Path(".")
    DATA_DIR = BASE_DIR / "measurements"
    RESULTS_DIR = BASE_DIR / "results"
    DEG_DIR = BASE_DIR / "degradations"









.. GENERATED FROM PYTHON SOURCE LINES 34-38

Load base image datasets and degradation operators.
----------------------------------------------------------------------------------------
In this example, we use the Set3C dataset


.. GENERATED FROM PYTHON SOURCE LINES 38-54

.. code-block:: Python


    # Set the global random seed from pytorch to ensure reproducibility of the example.
    torch.manual_seed(0)

    device = dinv.utils.get_freer_gpu() if torch.cuda.is_available() else "cpu"

    # Set up the variable to fetch dataset and operators.
    dataset_name = "set3c"
    img_size = 256 if torch.cuda.is_available() else 64
    val_transform = transforms.Compose(
        [transforms.CenterCrop(img_size), transforms.ToTensor()]
    )

    dataset = load_dataset(dataset_name, transform=val_transform)









.. GENERATED FROM PYTHON SOURCE LINES 55-58

Generate an inpainting problem
--------------------------------------------------------------------------------
We use the Inpainting class from the physics module to generate an images with missing pixels.

.. GENERATED FROM PYTHON SOURCE LINES 58-84

.. code-block:: Python



    noise_level_img = 0.05  # Gaussian Noise standard deviation for the degradation
    n_channels = 3  # 3 for color images, 1 for gray-scale images

    # Select the first image from the dataset
    x = dataset[0].unsqueeze(0).to(device)

    # Generate a mask for the inpainting problem
    mask = torch.ones_like(x)[0]
    mask[
        ...,
        x.shape[-2] // 2 - x.shape[-2] // 8 : x.shape[-2] // 2 + x.shape[-2] // 8,
        x.shape[-1] // 2 - x.shape[-1] // 8 : x.shape[-1] // 2 + x.shape[-1] // 8,
    ] = 0

    physics = dinv.physics.Inpainting(
        img_size=(n_channels, img_size, img_size),
        mask=mask,
        device=device,
        noise_model=dinv.physics.GaussianNoise(sigma=noise_level_img),
    )

    # Apply the degradation to the image
    y = physics(x)








.. GENERATED FROM PYTHON SOURCE LINES 85-91

Exploring the wavelet prior.
------------------------------------

In this example, we will use the wavelet prior, which can be done with the :class:`deepinv.optim.prior.WaveletPrior`
class. The prior object represents the cost function of the prior, as well as convenient methods,
such as its proximal operator :math:`\text{prox}_{\tau \regname}`.

.. GENERATED FROM PYTHON SOURCE LINES 91-103

.. code-block:: Python


    # Set up the wavelet prior
    prior = dinv.optim.prior.WaveletPrior(level=4, wv="db8", p=1, device=device)

    # Compute the wavelet prior cost
    cost_wv = prior(y)
    print(f"Cost wavelet: g(y) = {cost_wv.item():.2f}")

    # Apply the proximal operator of the wavelet prior
    x_wv = prior.prox(y, gamma=0.1)
    cost_wv_prox = prior(x_wv)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Cost wavelet: g(y) = 1830.51




.. GENERATED FROM PYTHON SOURCE LINES 104-109

.. note::
          The output of the proximity operator of the wavelet prior is **not** the solution to our inpainting problem. It is only a
          step towards the solution and is used in the proximal gradient descent algorithm to solve the inverse
          problem.


.. GENERATED FROM PYTHON SOURCE LINES 109-124

.. code-block:: Python


    # Plot the input and the output of the wavelet proximal operator
    plot(
        {
            "Input": y,
            "Output": x_wv,
        },
        subtitles=[
            f"Wavelet cost:\n{int(cost_wv.item())}",
            f"Wavelet cost:\n{int(cost_wv_prox.item())}",
        ],
        tight=False,
    )





.. image-sg:: /auto_examples/optimization/images/sphx_glr_demo_wavelet_prior_001.png
   :alt: Input, Output
   :srcset: /auto_examples/optimization/images/sphx_glr_demo_wavelet_prior_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 125-140

Set up the optimization algorithm to solve the inverse problem.
--------------------------------------------------------------------------------
The problem we want to minimize is the following:

.. math::

    \begin{equation*}
    \underset{x}{\operatorname{min}} \,\, \frac{1}{2} \|Ax-y\|_2^2 + \lambda \|\Psi x\|_{1}(x),
    \end{equation*}


where :math:`1/2 \|A(x)-y\|_2^2` is the a data-fidelity term, :math:`\|\Psi x\|_{1}(x)` is a sparsity inducing
prior for the image :math:`x`, and :math:`\lambda>0` is a regularisation parameters.

We use a Proximal Gradient Descent (PGD) algorithm to solve the inverse problem.

.. GENERATED FROM PYTHON SOURCE LINES 140-173

.. code-block:: Python


    # Select the data fidelity term
    data_fidelity = L2()

    # Specify the prior (we redefine it with a smaller number of iteration for faster computation)
    prior = dinv.optim.prior.WaveletPrior(level=4, wv="db8", p=1, device=device)

    # Logging parameters
    verbose = True
    plot_convergence_metrics = (
        True  # compute performance and convergence metrics along the algorithm.
    )

    # Algorithm parameters
    lamb = 0.1  # wavelet regularisation parameter
    stepsize = 1.0  # stepsize for the PGD algorithm
    params_algo = {"stepsize": stepsize, "lambda": lamb}
    max_iter = 300
    early_stop = True
    backtracking = False

    # Instantiate the algorithm class to solve the problem.
    model = optim_builder(
        iteration="DRS",
        prior=prior,
        data_fidelity=data_fidelity,
        early_stop=early_stop,
        max_iter=max_iter,
        verbose=verbose,
        params_algo=params_algo,
        backtracking=backtracking,
    )








.. GENERATED FROM PYTHON SOURCE LINES 174-179

Evaluate the model on the problem and plot the results.
--------------------------------------------------------------------

The model returns the output and the metrics computed along the iterations.
For computing PSNR, the ground truth image ``x_gt`` must be provided.

.. GENERATED FROM PYTHON SOURCE LINES 179-212

.. code-block:: Python



    x_lin = physics.A_adjoint(y)  # linear reconstruction with the adjoint operator

    # run the model on the problem.
    x_model, metrics = model(
        y, physics, x_gt=x, compute_metrics=True
    )  # reconstruction with PGD algorithm

    # clamp the output to the valid range [0, 1]
    x_model = x_model.clamp(0, 1)

    # compute PSNR
    # plot images. Images are saved in RESULTS_DIR.
    plot(
        {
            "GT": x,
            "Input": y,
            "Linear": x_lin,
            "Recons.": x_model,
        },
        subtitles=[
            "PSNR:",
            f"{dinv.metric.PSNR()(x, y).item():.2f} dB",
            f"{dinv.metric.PSNR()(x, x_lin).item():.2f} dB",
            f"{dinv.metric.PSNR()(x, x_model).item():.2f} dB",
        ],
    )

    # plot convergence curves
    if plot_convergence_metrics:
        plot_curves(metrics)




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/optimization/images/sphx_glr_demo_wavelet_prior_002.png
         :alt: GT, Input, Linear, Recons.
         :srcset: /auto_examples/optimization/images/sphx_glr_demo_wavelet_prior_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/optimization/images/sphx_glr_demo_wavelet_prior_003.png
         :alt: PSNR, F, residual
         :srcset: /auto_examples/optimization/images/sphx_glr_demo_wavelet_prior_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Iteration 202, current converge crit. = 9.99E-06, objective = 1.00E-05 





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 2.073 seconds)


.. _sphx_glr_download_auto_examples_optimization_demo_wavelet_prior.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: demo_wavelet_prior.ipynb <demo_wavelet_prior.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: demo_wavelet_prior.py <demo_wavelet_prior.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: demo_wavelet_prior.zip <demo_wavelet_prior.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
